import logging
import requests
import asyncio
from datetime import datetime
import random
import pytz
from bs4 import BeautifulSoup

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = '7913456658:AAHS0nOMwlW89gMMGyvNEvHWZm7m9HQS2hs'
WEATHER_API_KEY = '28239cd5e279eb988fc138c29ade9c93'
CHAT_ID = -4830493043

CITY_COORDS = {
    '–ö–∏—ó–≤': (50.45, 30.52),
    '–í–∞—Ä—à–∞–≤–∞': (52.23, 21.01),
    '–ê–ª–∞–Ω—ñ—è': (36.54, 32.00)
}

CITY_TZ = {
    '–ö–∏—ó–≤': 'Europe/Kyiv',
    '–í–∞—Ä—à–∞–≤–∞': 'Europe/Warsaw',
    '–ê–ª–∞–Ω—ñ—è': 'Europe/Istanbul'
}

# === –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ ===
def get_closest_forecast(forecast_list, tz_str, target_hour):
    now = datetime.now(pytz.timezone(tz_str))
    closest_entry = None
    min_diff = float('inf')

    for entry in forecast_list:
        dt = datetime.utcfromtimestamp(entry['dt']).replace(tzinfo=pytz.utc).astimezone(pytz.timezone(tz_str))
        diff = abs((dt.hour - target_hour) + (dt.date() - now.date()).days * 24)
        if diff < min_diff:
            min_diff = diff
            closest_entry = entry

    if closest_entry:
        temp = round(closest_entry['main']['temp'])
        desc = closest_entry['weather'][0]['description'].capitalize()
        return f"{temp}¬∞C, {desc}"
    else:
        return "–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö"

def get_forecast_text(city_name):
    lat, lon = CITY_COORDS[city_name]
    tz = CITY_TZ[city_name]
    url = f'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=ua'

    try:
        res = requests.get(url)
        data = res.json()

        if "list" not in data or not data["list"]:
            return f"{city_name.ljust(9)} üî¥ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤—ñ–¥ API"

        forecast_list = data['list']

        morning = get_closest_forecast(forecast_list, tz, 9)
        afternoon = get_closest_forecast(forecast_list, tz, 14)
        evening = get_closest_forecast(forecast_list, tz, 19)

        def emoji(desc):
            desc = desc.lower()
            if "–¥–æ—â" in desc:
                return "üåßÔ∏è"
            if "–≥—Ä–æ–∑–∞" in desc:
                return "‚õàÔ∏è"
            if "—Å–Ω—ñ–≥" in desc:
                return "üå®Ô∏è"
            if "—Å–æ–Ω—è—á–Ω–æ" in desc or "—è—Å–Ω–æ" in desc:
                return "‚òÄÔ∏è"
            if "—Ö–º–∞—Ä" in desc:
                return "‚õÖ"
            if "—Ç—É–º–∞–Ω" in desc:
                return "üå´Ô∏è"
            return "üå§Ô∏è"

        def format_period(period):
            if period == "–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö":
                return "‚Äî"
            parts = period.split(", ")
            temp = parts[0]
            desc = parts[1] if len(parts) > 1 else ""
            return f"{emoji(desc)} {temp}"

        return f"{city_name.ljust(9)} {format_period(morning)}   {format_period(afternoon)}   {format_period(evening)}"

    except Exception as e:
        logger.exception(f"[{city_name}] Exception during weather fetch")
        return f"{city_name.ljust(9)} ‚ö†Ô∏è –ø–æ–º–∏–ª–∫–∞ API"

def get_weather_summary():
    lines = [get_forecast_text(city) for city in CITY_COORDS]
    return "üìÖ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n\n" + "\n".join(lines)

# === –í–∞–ª—é—Ç–∞ –∑ Minfin ===
def get_currency_table(url):
    try:
        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'html.parser')
        rows = soup.select('table tbody tr')
        logger.debug(f"[DEBUG] {url} - –∑–Ω–∞–π–¥–µ–Ω–æ {len(rows)} —Ä—è–¥–∫—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ")

        data = []
        for row in rows[:3]:
            cols = row.find_all('td')
            if len(cols) >= 3:
                date = cols[0].text.strip()
                sell = cols[1].text.strip()
                buy = cols[2].text.strip()
                data.append((date, buy, sell))
        return data
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É {url}: {e}")
        return []

def get_currency_summary():
    usd = get_currency_table("https://minfin.com.ua/ua/currency/auction/archive/usd/all/")
    eur = get_currency_table("https://minfin.com.ua/ua/currency/auction/archive/eur/all/")
    lines = ["üí± *–ö—É—Ä—Å –≤–∞–ª—é—Ç (–≥—Ä–∏–≤–Ω—è –¥–æ USD —Ç–∞ EUR):*",
             "–î–∞—Ç–∞       | USD –∫—É–ø. / –ø—Ä–æ–¥. | EUR –∫—É–ø. / –ø—Ä–æ–¥.",
             "-----------|------------------|------------------"]

    for i in range(min(len(usd), len(eur))):
        date = usd[i][0]
        usd_line = f"{usd[i][1]} / {usd[i][2]}"
        eur_line = f"{eur[i][1]} / {eur[i][2]}"
        lines.append(f"{date:<10} | {usd_line:<16} | {eur_line:<16}")
    return "\n".join(lines)

# === –Ü–Ω—à—ñ –±–ª–æ–∫–∏ ===
ZODIACS = {
    '–†–∏–±–∏': 'pisces',
    '–°—Ç—Ä—ñ–ª–µ—Ü—å': 'sagittarius'
}

def get_horoscope(sign):
    try:
        url = f"https://ohmanda.com/api/horoscope/{sign}/"
        res = requests.get(url).json()
        return res['horoscope']
    except:
        return "–ì–æ—Ä–æ—Å–∫–æ–ø —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."

def get_ba_tip():
    try:
        with open("ba_tips.txt", encoding="utf-8") as f:
            tips = f.readlines()
        return random.choice(tips).strip()
    except:
        return "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∞–∂–ª–∏–≤–æ –∑–∞–ª–∏—à–∞—Ç–∏—Å—è —Å—Ñ–æ–∫—É—Å–æ–≤–∞–Ω–∏–º üòâ"

# === –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ ===
async def send_digest():
    message = f"""üìÖ *–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É, –∫–æ–º–∞–Ω–¥–∞!*
–û—Å—å –≤–∞—à —Ä–∞–Ω–∫–æ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:

{get_weather_summary()}

{get_currency_summary()}

‚ôì *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –†–∏–±:* {get_horoscope(ZODIACS['–†–∏–±–∏'])}

‚ôê *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –°—Ç—Ä—ñ–ª—å—Ü—è:* {get_horoscope(ZODIACS['–°—Ç—Ä—ñ–ª–µ—Ü—å'])}

üìä *–ü–æ—Ä–∞–¥–∞ –¥–ª—è –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:*
{get_ba_tip()}"""

    print("=== –ì–æ—Ç–æ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç ===")
    print(message)

if __name__ == "__main__":
    asyncio.run(send_digest())

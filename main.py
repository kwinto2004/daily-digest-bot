import logging
import requests
import schedule
import time
import asyncio
from datetime import datetime
from telegram import Bot
from telegram.constants import ParseMode
import random
import pytz

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TELEGRAM_TOKEN = '7913456658:AAHS0nOMwlW89gMMGyvNEvHWZm7m9HQS2hs'
WEATHER_API_KEY = '28239cd5e279eb988fc138c29ade9c93'
CHAT_ID = -4830493043

# –ú—ñ—Å—Ç–∞ —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
CITY_COORDS = {
    '–ö–∏—ó–≤': (50.45, 30.52),
    '–í–∞—Ä—à–∞–≤–∞': (52.23, 21.01),
    '–ê–ª–∞–Ω—ñ—è': (36.54, 32.00)
}

# –ß–∞—Å–æ–≤—ñ –ø–æ—è—Å–∏ –º—ñ—Å—Ç
CITY_TZ = {
    '–ö–∏—ó–≤': 'Europe/Kyiv',
    '–í–∞—Ä—à–∞–≤–∞': 'Europe/Warsaw',
    '–ê–ª–∞–Ω—ñ—è': 'Europe/Istanbul'
}

bot = Bot(token=TELEGRAM_TOKEN)

# === –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö ===
def get_forecast_for_period(forecast_list, tz_str, period_start_hour, period_end_hour):
    now = datetime.now(pytz.timezone(tz_str))
    today = now.date()
    period_entries = []

    for entry in forecast_list:
        dt = datetime.utcfromtimestamp(entry['dt']).replace(tzinfo=pytz.utc).astimezone(pytz.timezone(tz_str))
        if dt.date() == today and period_start_hour <= dt.hour <= period_end_hour:
            period_entries.append(entry)

    if not period_entries:
        return "–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö"

    avg_temp = round(sum(e['main']['temp'] for e in period_entries) / len(period_entries))
    main_desc = period_entries[0]['weather'][0]['description'].capitalize()
    return f"{avg_temp}¬∞C, {main_desc}"

def get_weather_forecast(city_name):
    lat, lon = CITY_COORDS[city_name]
    tz = CITY_TZ[city_name]

    url = f'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=ua'
    try:
        res = requests.get(url).json()
        forecast_list = res['list']

        morning = get_forecast_for_period(forecast_list, tz, 6, 11)
        afternoon = get_forecast_for_period(forecast_list, tz, 12, 16)
        evening = get_forecast_for_period(forecast_list, tz, 17, 21)

        return f"""üå§ *–ü–æ–≥–æ–¥–∞ –≤ {city_name}:*
üïò –†–∞–Ω–æ–∫: {morning}
üïõ –û–±—ñ–¥: {afternoon}
üåÜ –í–µ—á—ñ—Ä: {evening}"""

    except Exception as e:
        return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city_name}: {e}"

def get_all_forecasts():
    return "\n\n".join([get_weather_forecast(city) for city in CITY_COORDS])

# === –Ü–Ω—à—ñ –±–ª–æ–∫–∏ ===
ZODIACS = {
    '–†–∏–±–∏': 'pisces',
    '–°—Ç—Ä—ñ–ª–µ—Ü—å': 'sagittarius'
}

def get_horoscope(sign):
    try:
        url = f"https://ohmanda.com/api/horoscope/{sign}/"
        res = requests.get(url).json()
        return res['horoscope']
    except:
        return "–ì–æ—Ä–æ—Å–∫–æ–ø —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."

def get_ba_tip():
    try:
        with open("ba_tips.txt", encoding="utf-8") as f:
            tips = f.readlines()
        return random.choice(tips).strip()
    except:
        return "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∞–∂–ª–∏–≤–æ –∑–∞–ª–∏—à–∞—Ç–∏—Å—è —Å—Ñ–æ–∫—É—Å–æ–≤–∞–Ω–∏–º üòâ"

# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ===
async def send_digest():
    if datetime.now().weekday() > 4:
        return  # —Ç—ñ–ª—å–∫–∏ –ø–Ω‚Äì–ø—Ç

    message = f"""üìÖ *–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É, –∫–æ–º–∞–Ω–¥–∞!*
–û—Å—å –≤–∞—à —Ä–∞–Ω–∫–æ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:

{get_all_forecasts()}

‚ôì *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –†–∏–±:* {get_horoscope(ZODIACS['–†–∏–±–∏'])}

‚ôê *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –°—Ç—Ä—ñ–ª—å—Ü—è:* {get_horoscope(ZODIACS['–°—Ç—Ä—ñ–ª–µ—Ü—å'])}

üìä *–ü–æ—Ä–∞–¥–∞ –¥–ª—è –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:*
{get_ba_tip()}"""

    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode=ParseMode.MARKDOWN)

# === –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ ===
schedule.every().day.at("09:00").do(lambda: asyncio.run(send_digest()))

print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î. –û—á—ñ–∫—É—î –Ω–∞ 09:00 –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –ø–æ –ø º—è—Ç–Ω–∏—Ü—é...")

while True:
    schedule.run_pending()
    time.sleep(60)


# –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ä—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫:
# asyncio.run(send_digest())
